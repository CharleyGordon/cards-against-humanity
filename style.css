:root {
    font-size: 16px;
    font-family: Helvetica, sans-serif;
    font-weight: 600;

    /* gaps */
    --standard-gap: 1rem;
    --small-gap: calc(var(--standard-gap) / 2);

    /* colors */
    --main-color: white;
    --secondary-color: black;

    /* paddings */
    --standard-padding: 1ch;
    --small-padding: calc(var(--small-padding) / 2);

    /* border-radius */
    --standard-border-radius: 1vmax;

    --small-border-radius: calc(var(--standard-border-radius) / 4);
}

button {
    font-weight: inherit;
    font-size: inherit;
}

input,
textarea {
    background-color: var(--secondary-color);
    color: var(--main-color);
}

#start-game {
    font-size: inherit;
    font-weight: inherit;
    width: min(20ch, 200px);
}

ul {
    list-style: none;
    list-style-position: inside;
}

a {
    cursor: pointer;
}

body {
    width: 100%;
    min-height: 100vh;
    background-color: var(--secondary-color);
}

*,
*::before,
*::after {
    box-sizing: border-box;
    margin: 0;
    padding: 0;

    color: var(--main-color);
}

.content > * {
    padding: var(--standard-padding);
}

:where(#game-settings, #start-game):not(.visible) {
    display: none;
}

#game-settings-link:not(.visible) {
    display: none;
}

#game-settings:not(:target) {
    display: none;
}

#game-settings:target ~ #game {
    display: none;
}

#game-settings {
    width: 90%;
    grid-template-columns: repeat(2, 1fr);
    position: fixed;
    top: 2%;
    left: 5%;
    padding: calc(var(--standard-padding) * 2);

    outline: 1px solid var(--main-color);
    outline-offset: 0;
    border-radius: var(--small-border-radius);
    z-index: 0;
}

#game-settings::after {
    content: "";
    position: absolute;
    inset: 0;
    scale: 100;
    opacity: 0.9;
    z-index: -1;
    background-color: var(--secondary-color);
}

#game-settings .optionals {
    grid-column: 1 / -1;
    justify-self: start;
    width: 100%;
    display: grid;
    align-items: center;
}

#game-settings input[type="number"] {
    margin-block-start: auto;
}

.optionals .description {
    margin-block: calc(var(--standard-gap) / 2);
}

#game-settings label {
    width: 90%;
}

#game-settings :is(.optionals label, label) {
    width: 100%;
}

#game-settings .close {
    position: absolute;
    top: 0;
    right: 0.5ch;
    font-size: 2.5ch;
}

:is(input[type="number"], button) {
    padding: var(--standard-padding);
    width: 6rem;
    appearance: textfield;
    -moz-appearance: textfield;
    -webkit-appearance: textfield;
    border: none;
    outline: 1px solid var(--main-color);
    color: var(--main-color);
    background-color: var(--secondary-color);
    text-align: center;
}

#game-settings :is(input, button) {
    justify-self: center;
}

#game-settings button {
    grid-column: 1 / -1;
}

header,
form,
#card-creation,
#game {
    display: grid;
}

form {
    gap: var(--standard-gap);
    text-transform: uppercase;
}

form .description {
    display: block;
    width: fit-content;
    margin-inline: auto;
    z-index: 1;
}

form :is(button, label) {
    width: min(100%, 20ch);
    text-align: center;
}

form label,
button,
input {
    padding: var(--standard-padding);
    border-radius: var(--small-border-radius);
}

form label {
    position: relative;
    display: inherit;
    gap: var(--small-gap);
}

form :is(input, textarea) {
    appearance: none;
    width: 100%;
    display: block;
}

form textarea {
    min-height: 10ch;
}

input[type="checkbox"],
button {
    cursor: pointer;
}

input:not([type="number"], [type="text"]),
input::after {
    position: absolute;
    inset: 0;
}

input::after {
    content: "";
}

input:checked::after {
    border-bottom: 1px solid var(--main-color);
}

header {
    font-size: 1.5rem;
    justify-items: center;
}

header nav {
    order: -1;
}

header nav ul {
    display: flex;
    gap: 2rem;
}

.players-table {
    --max-height: 15ch;
    width: fit-content;
    max-height: var(--max-height);
    overflow: auto;
    z-index: -1;
}

.players-table th:nth-of-type(even) {
    display: block;
    position: relative;
}

.players-table th:nth-of-type(even)::before {
    content: "|";
    position: absolute;
    left: 0;
}

.players-table,
.players-table :is(thead, tbody, tr) {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
}

.players-table :is(thead, tbody, tr) {
    grid-column: 1 / -1;
}

.players-table :is(th, tr) {
    text-align: start;
}

.players-table :is(th:last-of-type, .score) {
    text-align: end;
}

.players-table td {
    width: 100%;
}

.players-table .player-label {
    padding-inline-end: 1rem;
}

#players li {
    display: flex;
    gap: var(--standard-gap);
}

#players .score {
    margin-inline-start: auto;
}

.host {
    display: inline-block;
}

.host > td:first-of-type::before {
    content: "(host) ";
}

.card {
    animation: appear 1s linear forwards;
    overflow: hidden;
}

.card figcaption {
    max-width: 25ch;
    padding-block-end: 2ch;
    text-shadow: 1px 1px black -1px -1px black;
    word-break: break-word;
    overflow: auto;
}

.card :where(.pick, .reveal) {
    cursor: pointer;
}

.card.selected {
    border: 1px solid red;
}

.card:not(.hidden) .reveal {
    display: none;
}

.card.hidden :not(.reveal) {
    display: none;
}

#cards {
    display: flex;
    flex-wrap: wrap;
    gap: var(--standard-gap);
}

#cards .card {
    width: 45%;
}

.card {
    --card-padding: calc(var(--standard-padding) * 2);
    display: grid;
    position: relative;
    aspect-ratio: 1;
    grid-template-columns: 1fr 1rem;
    padding: var(--card-padding);

    border: 1px solid;
    border-radius: 0.5vmax;

    transition: scale 0.5s;
}

.card:not(:hover, :focus-within) {
    scale: 0.95;
}

.card > * {
    padding: inherit;
    position: absolute;
    inset: 0;
}

.card img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.card img:not([src]),
img[src=""] {
    display: none;
}

.card :where(.pick, .reveal) {
    position: relative;
    margin-block-start: auto;
    display: block;
    grid-column: 1 / -1;
    margin-inline: auto;
}

.card .pick {
    background-color: black;
    padding: calc(var(--standard-padding) / 4);
}

.card .dump {
    grid-column: 2;
    padding-inline: 0;
    translate: calc(var(--card-padding) - 1ch)
        calc(var(--card-padding) * -1 + 1ch);
}

#game:is(.voting, .hidden-cards) .configurables {
    display: none;
}

.card.marked {
    box-shadow: 1px 1px 10px 2px black;
}

.card.non-deletable .throw {
    display: none;
}

.card.marked > * {
    opacity: 0.4;
}

.card.marked::before {
    content: attr(id);
    position: absolute;
    place-self: center;
    z-index: 2;
    font-weight: 700;
}

#game {
    position: relative;
    gap: var(--standard-gap);
    max-height: 90vh;
}

#game.assembly-layout {
    grid-template-columns: 2fr 1fr;
}
#game:not(.assembly-layout) #cards-assembly {
    display: none;
}

#game.assembly-layout > *:not(#cards, #cards-assemly) {
    grid-column: 1 / -1;
}

#game.assembly-layout #cards-assembly {
    grid-column: 2;
    border-inline-start: 1px solid var(--main-color);
}

#game.assembly-layout .optionals {
    align-self: end;
    width: 100%;
    display: flex;
    gap: var(--standard-gap);
}

:where(#assembly-save, #assembly-clear) {
    align-self: end;
}



.interface {
    display: flex;
    flex-direction: column;
    gap: var(--standard-gap);
    text-align: center;
}

/* .interface > * {
    width: 100%;
} */

.interface :is(.configurables, #clock) {
    margin-inline: auto;
}

.interface .configurables {
    width: fit-content;
    display: flex;
    gap: var(--standard-gap);

}

#game.voting :where(.card .throw, #clock) {
    display: none;
}

#game:not(.active) #clock {
    display: none;
}
/* hide form with game start button */
#game:is(.active, .voting) ~ .start-game {
    display: none;
}

.start-game {
    width: fit-content;
    margin-inline: auto;
}

#game.voting #cards {
    justify-content: center;
}

#game.voting .card {
    padding: 0;
}

#game.voting .card > :is(figcaption, .pick) {
    padding: var(--standard-padding);
}

#game.voting .dump {
    display: none;
}

#game:not(.voting).hidden-cards .card {
    display: none;
}

#game:not(.active) .configurables,
#game.hidden-cards .configurables,
#card-creation:not(.active) {
    display: none;
}

#clock,
#question,
#winner {
    justify-self: center;
}

#question,
#winner {
    font-size: 2rem;
}

#clock {
    --clock-width: min(60px, 4ch);
    font-size: 1.2rem;
    justify-self: center;
    width: var(--clock-width);
    aspect-ratio: 1 / 1;
    display: grid;
    place-items: center;
    border: 1px solid var(--main-color);
}

#card-creation {
    display: grid;

    position: fixed;
    top: 50%;
    left: 50%;
    translate: -50% -50%;
    z-index: 0;
}

#card-creation::before {
    content: "";
    position: absolute;
    inset: 0;
    scale: 100;
    background: black;
    opacity: 0.9;
    z-index: -1;
}

#creation-save {
    align-self: end;
}

#creation-exit {
    grid-column: 1 / -1;
    text-align: center;
}

@keyframes appear {
    from {
        opacity: 0;
        translate: -50%;
    }

    to {
        opacity: 1;
        translate: 0;
    }
}

@media (max-width: 300px) {
    #game-settings {
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
    }

    #game-settings > label .description {
        text-align: start;
        max-width: 10ch;
    }

    #game-settings > label input {
        width: 2.5rem;
        height: 2.5rem;
        margin-block: auto;
        margin-inline-end: auto;
    }
}

@media (max-width: 400px) {
    #cards-assembly .card {
        aspect-ratio: 1 / 2;
    }
}

@media (max-width: 530px) {
    #cards .card {
        width: 100%;
    }

    #game.assembly-layout {
        grid-template-columns: 1fr 0.8fr;
    }

    #cards
}

@media (max-width: 600px) and (min-height: 440px) {
    #card-creation {
        display: flex;
        flex-wrap: wrap;
    }

    #card-creation :is(.card, label, *) {
        width: 100%;
    }

    #creation-exit {
        text-align: center;
    }
}

@media (max-width: 620px) {
    #game-settings {
        gap: min(var(--standard-gap), 1vh);
        padding: calc(var(--standard-padding) / 2);
        margin-block: auto;
    }

    #game-settings > label:last-of-type {
        grid-column: 1 / -1;
    }

    /* #game-settings .close {
        translate: 0 -100%;
    } */

    #game-settings .optionals {
        grid-template-columns: repeat(2, 1fr);
    }

    .optionals :is(.description, label:last-of-type) {
        grid-column: 1 / -1;
    }
}

@media (max-width: 800px) and (min-height: 440px) {
    #card-creation {
        grid-template-columns: 1fr 2fr;
    }
}

@media (min-height: 610px) {
    #game-settings {
        top: 50%;
        translate: 0 -50%;
    }
}

@media (min-width: 400px) {
    #card-creation {
        grid-template-columns: repeat(2, 1fr);
    }

    #creation-lookup {
        margin-block: auto;
    }
}

@media (min-width: 600px) {
    #cards .card {
        width: min(30ch, 300px);
    }

    #creation-lookup {
        width: 100%;
        height: 100%;
    }
}

@media (min-width: 620px) {
    #game-settings {
        --row-gap: 2rem;

        top: 50%;
        left: 50%;
        translate: -50% -50%;

        grid-template-columns: repeat(5, 1fr);
        justify-items: center;
        column-gap: 0;
        row-gap: var(--row-gap);
        width: fit-content;

        outline: 1px solid var(--main-color);
        outline-offset: 0;
        border-radius: var(--small-border-radius);
        z-index: 0;
    }

    #game-settings .optionals {
        grid-auto-flow: column;
        column-gap: calc(var(--row-gap) * 2);
        grid-auto-columns: 1fr;
    }

    .optionals .description {
        margin-block: 0;
    }
}
